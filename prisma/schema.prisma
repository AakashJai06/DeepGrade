generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
id Int @id @default(autoincrement())
email String @unique
password String
firstName String
lastName String
role String
}
model questionpaper {
  qpid    String         @id @default(uuid()) // Unique Question Paper ID
  name    String         @unique
  password String
  questions questiondetails[]
  studentanswers studentanswers[]

  query query[]
}

model questiondetails {
  qd_id    String        @id @default(uuid()) 
  name     String        // Foreign key to QuestionPaper
  q_no     Int           // Question number for indexing
  question String
  answer   String
  evaluationCriteria String

  questionPaper questionpaper @relation(fields: [name], references: [name])
}

model Student {
  sid      String        @id @default(uuid()) 
  email     String      @unique
  roll      String     @unique
  answers  studentanswers[]

  query query[]
}

model studentanswers {
  sa_id    String        @id @default(uuid()) 
  name     String        // Foreign key to QuestionPaper
  roll     String        // Foreign key to Student
  q_no     Int           // Question number for indexing
  answer   String
  grade    Float         @default(0) // Stores the grade assigned to this answer

  questionPaper questionpaper @relation(fields: [name], references: [name])
  student       Student       @relation(fields: [roll], references: [roll])
    @@map("studentanswers")
    @@unique([name, roll, q_no])
}

model query {
  query_id String   @id @default(uuid())  // Unique Query ID
  name     String                            // Foreign key to QuestionPaper
  roll     String                            // Foreign key to Student
  query    String                            // The query text
  createdAt DateTime @default(now())          // Timestamp for when the query was raised

  questionPaper questionpaper @relation(fields: [name], references: [name])
  student       Student       @relation(fields: [roll], references: [roll])
}

